# -*- coding: utf-8 -*-
"""model_nw.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13HhgUOUdRnqKYeHPSTdKWtfwzKWyS_Bj
"""


import sys
from warnings import catch_warnings


from cfg import Config

import os
from tqdm import tqdm
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 


from scipy.io import wavfile
from python_speech_features import mfcc
import librosa

from keras.layers import Conv2D, MaxPool2D, Flatten, LSTM
from keras.layers import Dropout, Dense, TimeDistributed
from keras.models import Sequential
from tensorflow.keras.utils import to_categorical
from sklearn.utils.class_weight import compute_class_weight

import pickle
from keras.callbacks import ModelCheckpoint

Folderpath = "C:\\Users\\manis\\Desktop\\zn\\cry_analysis\\"


def check_data():
  if not os.path.exists(Folderpath + 'pickles\\'):
      os.makedirs(Folderpath + 'pickles\\')
      
  if os.path.isfile(config.p_path):
    print('loading existing data for {} model'.format(config.mode))
    with open(config.p_path, 'rb') as handle:
      tmp = pickle.load(handle)
      return tmp
  else:
    return None

def build_rand_feat():
    tmp = check_data() 
    if tmp:
      return tmp.data[0], tmp.data[1]
    X = []
    y = []
    _min, _max = float('inf'),-float('inf')
    for _ in tqdm(range(n_samples)):
        rand_class = np.random.choice(class_dist.index, p = prob_dist)
        file = np.random.choice(df[df.label == rand_class].index)
        rate, wav = wavfile.read(Folderpath + 'clean//'+ file)
        label = df.at[file, 'label']
        rand_index = np.random.randint(0, wav.shape[0]- config.step)
        sample = wav[rand_index:rand_index+config.step]
        
        X_sample = mfcc(sample, rate, numcep= config.nfeat, nfilt= config.nfilt, nfft= config.nfft)
        _min = min(np.amin(X_sample),_min)
        _max = max(np.amax(X_sample),_max)
        X.append(X_sample)
        y.append(classes.index(label))
    config.min = _min
    config.max = _max
    X, y = np.array(X), np.array(y)
    X = (X - _min)/ (_max - _min)
    
    X = X.reshape(X.shape[0], X.shape[1], X.shape[2], 1)
    y = to_categorical(y, num_classes=5)
    config.data = (X,y)
    try:
      with open(config.p_path, 'wb') as handle:
        pickle.dump(config, handle, protocol = pickle.HIGHEST_PROTOCOL)
        #return tmp
    except(FileNotFoundError) as e :
      print(e)
      pass
    return X,y

def get_conv_model():
    model = Sequential()
    model.add(Conv2D(16, (3, 3), activation='relu', strides = (1, 1), padding = 'same', input_shape = input_shape))
    model.add(Conv2D(32, (3, 3), activation='relu', strides = (1, 1), padding = 'same'))
    model.add(Conv2D(64, (3, 3), activation='relu', strides = (1, 1), padding = 'same'))
    model.add(Conv2D(128, (3, 3), activation='relu', strides = (1, 1), padding = 'same'))
    model.add(MaxPool2D((2, 2)))
    model.add(Dropout(0.5))
    model.add(Flatten())
    model.add(Dense(128, activation='relu'))
    model.add(Dense(64, activation='relu'))
    model.add(Dense(5, activation='softmax'))
    model.summary()
    model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['acc'])
    return model

print(os.getcwd())

df  = pd.read_csv(Folderpath + 'cries.csv')
df.set_index('fname', inplace=True)

for f in df.index :
    rate, signal = wavfile.read(Folderpath +  'clean//' + f)
    df.at[f,'length'] = signal.shape[0]/rate
df.head()

classes = list(np.unique(df.label))
class_dist = df.groupby(['label'])['length'].mean()
print(class_dist)

fig, ax = plt.subplots()
ax.set_title('Class Distribution', y=1.08)
ax.pie(class_dist, labels=class_dist.index, wedgeprops = {'edgecolor': 'black'},autopct='%1.1f%%', shadow=False, startangle=90)
ax.axis('equal')
plt.tight_layout()
plt.show()
#df.reset_index(inplace=True)

print(class_dist.sum())

print(int(df['length'].sum()/0.1))
n_samples = 2 * int(df['length'].sum()/0.1)
prob_dist = class_dist / class_dist.sum()
choices = np.random.choice(class_dist.index, p = prob_dist)
print(choices)

config = Config(mode='conv')

X, y = build_rand_feat()

y_flat = np.argmax(y, axis=1)
input_shape = (X.shape[1], X.shape[2], 1)
model = get_conv_model()
#class_weight = compute_class_weight('balanced', np.unique(y_flat), y_flat)
checkpoint = ModelCheckpoint(config.model_path, monitor = 'val_acc', verbose = 1, mode = 'max', save_best_only = True, period = 1)

model.fit(X, y, epochs = 10, batch_size = 32, shuffle = True, validation_split = 0.1, callbacks = [checkpoint] )
model.save(config.model_path)

print(X.shape)
print(y.shape)
#print(X)
print(y)

type(y_flat)