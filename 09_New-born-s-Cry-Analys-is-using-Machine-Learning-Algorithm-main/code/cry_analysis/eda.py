# -*- coding: utf-8 -*-
"""pr1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mk5smHBhaE4YU9-2sVALjgI0inQ9fvSd
"""



#imports
import os
from tqdm import tqdm
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from scipy.io import wavfile
from python_speech_features import mfcc, logfbank
import librosa


#for noise threshold detection, to get rid of low mag./dead signals
def envelope(y, rate, threshold):
    mask = []
    y = pd.Series(y).apply(np.abs)
    y_mean = y.rolling(window=int(rate/10), min_periods=1, center=True).mean()
    for mean in y_mean :
        if mean > threshold :
            mask.append(True)
        else :
            mask.append(False)
    #print(threshold)
    return mask

def calc_fft(y, rate):
    n = len(y)
    freq = np.fft.rfftfreq(n, d= 1/rate)        #d - spacing btw all of these individual samples
    Y = abs(np.fft.rfft(y)/n)                   #magnitude
    return(Y , freq)


#Plotting sub-plots
def plot_signals(signals):
    fig, axes = plt.subplots(nrows=1, ncols=5, sharex=False, sharey=True, figsize= (20,5))
    fig.suptitle('Time Series', size = 16)
    i = 0
    for x in range(5):
        axes[x].set_title(list(signals.keys())[i])
        axes[x].plot(list(signals.values())[i])
        axes[x].get_xaxis().set_visible(False)
        axes[x].get_yaxis().set_visible(False)
        i+= 1 

def plot_fft(fft):
    fig, axes = plt.subplots(nrows=1, ncols=5, sharex=False, sharey=True, figsize= (20,5))
    fig.suptitle('Fourier Transforms', size = 16)
    i = 0
    for x in range(5):
        data = list(fft.values())[i]
        Y, freq = data[0], data[1]
        axes[x].set_title(list(fft.keys())[i])
        axes[x].plot(freq, Y)
        axes[x].get_xaxis().set_visible(False)
        axes[x].get_yaxis().set_visible(False)
        i+= 1 

def plot_fbank(fbank):
    fig, axes = plt.subplots(nrows=1, ncols=5, sharex=False, sharey=True, figsize= (20,5))
    fig.suptitle('Filter bank Coefficients', size = 16)
    i = 0
    for x in range(5):
        axes[x].set_title(list(fbank.keys())[i])
        axes[x].imshow(list(fbank.values())[i], cmap = 'hot', interpolation = 'nearest')
        axes[x].get_xaxis().set_visible(False)
        axes[x].get_yaxis().set_visible(False)
        i+= 1 

def plot_mfccs(mfccs):
    fig, axes = plt.subplots(nrows=1, ncols=5, sharex=False, sharey=True, figsize= (20,5))
    fig.suptitle('Mel Frequency Cepstrum Coefficients', size = 16)
    i = 0
    for x in range(5):
        axes[x].set_title(list(mfccs.keys())[i])
        axes[x].imshow(list(mfccs.values())[i], cmap = 'hot', interpolation = 'nearest')
        axes[x].get_xaxis().set_visible(False)
        axes[x].get_yaxis().set_visible(False)
        i+= 1


#folderpath var
Folderpath = "C:\\Users\\manis\\Desktop\\zn\\cry_analysis\\"

print(os.getcwd())
df  = pd.read_csv(Folderpath + 'cries.csv')

df.head()

df.columns

df.set_index('fname', inplace=True)
for f in df.index :
    rate, signal = wavfile.read(Folderpath + 'dataset\\' + f)
    df.at[f,'length'] = signal.shape[0]/rate

classes = list(np.unique(df.label))
classes

class_dist = df.groupby(['label'])['length'].mean()
print(class_dist)

fig, ax = plt.subplots()
ax.set_title('Class Distribution', y=1.08)
ax.pie(class_dist, labels=class_dist.index, wedgeprops = {'edgecolor': 'black'},autopct='%1.1f%%', shadow=False, startangle=90)
ax.axis('equal')
plt.tight_layout()
plt.show()
df.reset_index(inplace=True)

df.head(5)

#storing different plots
signals = {}
fft = {}
fbank = {}
mfccs = {}

for c in classes :
    wav_file = df[df.label == c].iloc[0,0]
    signal, rate = librosa.load(Folderpath +  'dataset\\' + wav_file, sr= 44100)
    signals[c] = signal
    fft[c] = calc_fft(signal, rate)

    bank = logfbank(signal[:rate], rate, nfilt=26, nfft=1103).T
    fbank[c] = bank
    mel = mfcc(signal[:rate], rate, numcep=13, nfilt=26, nfft=1103).T
    mfccs[c] = mel

list(signals.keys())[0]

list(signals.values())[0]

plot_signals(signals)
plt.show()

plot_fft(fft)
plt.show()

plot_fbank(fbank) 
plt.show()

plot_mfccs(mfccs)
plt.show()

signals = {}
fft = {}
fbank = {}
mfccs = {}

for c in classes :
    wav_file = df[df.label == c].iloc[0,0]
    signal, rate = librosa.load(Folderpath +  'dataset\\' + wav_file, sr= 44100)
    mask = envelope(signal, rate, 0.0005)
    signal = signal[mask]
    signals[c] = signal
    fft[c] = calc_fft(signal, rate)

    bank = logfbank(signal[:rate], rate, nfilt=26, nfft=1103).T
    fbank[c] = bank
    mel = mfcc(signal[:rate], rate, numcep=13, nfilt=26, nfft=1103).T
    mfccs[c] = mel

plot_signals(signals)
plt.show()

plot_mfccs(mfccs)
plt.show()



#downsampling
if not os.path.exists(Folderpath + 'clean\\'):
    os.makedirs(Folderpath + 'clean\\')

if len(os.listdir(Folderpath + 'clean\\')) == 0:
    for f in tqdm(df.fname):
        signal,rate = librosa.load(Folderpath +  'dataset\\'+f, sr=16000)
        mask = envelope(signal, rate, 0.0005)
        wavfile.write(filename = Folderpath + 'clean\\'+f, rate=rate, data=signal[mask])
else : 
    print('Files already cleaned!!')
    
print("Done!!")